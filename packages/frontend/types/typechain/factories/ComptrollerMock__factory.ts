/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ComptrollerMock,
  ComptrollerMockInterface,
} from "../ComptrollerMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_assets",
        type: "address[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "accountAssets",
    outputs: [
      {
        internalType: "contract CTokenInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "accountsLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getAccountLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "error",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "shortfall",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getAssetsIn",
    outputs: [
      {
        internalType: "contract CTokenInterface[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "markets",
    outputs: [
      {
        internalType: "bool",
        name: "isListed",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "collateralFactorMantissa",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isComped",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
    ],
    name: "setAccountLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "contract CTokenInterface[]",
        name: "assets",
        type: "address[]",
      },
    ],
    name: "setAssetsIn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516107a73803806107a783398101604081905261002f91610135565b805160005b8181101561011157600160008085848151811061006157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060000160006101000a81548160ff021916908315150217905550670c7d713b49da00006000808584815181106100cf57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600101819055508080610109906101f5565b915050610034565b505050610232565b80516001600160a01b038116811461013057600080fd5b919050565b60006020808385031215610147578182fd5b82516001600160401b038082111561015d578384fd5b818501915085601f830112610170578384fd5b8151818111156101825761018261021c565b838102604051858282010181811085821117156101a1576101a161021c565b604052828152858101935084860182860187018a10156101bf578788fd5b8795505b838610156101e8576101d481610119565b8552600195909501949386019386016101c3565b5098975050505050505050565b600060001982141561021557634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b610566806102416000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638e8f294b1161005b5780638e8f294b146100d5578063abfceffc146100f7578063d193b0bd14610117578063dce15449146101375761007d565b80635b412bae146100825780635ec88c79146100975780638abf723b146100c2575b600080fd5b610095610090366004610416565b610157565b005b6100aa6100a536600461031d565b610173565b6040516100b9939291906104c5565b60405180910390f35b6100956100d0366004610340565b610191565b6100e86100e336600461031d565b61022a565b6040516100b99392919061048e565b61010a61010536600461031d565b610250565b6040516100b99190610441565b61012a61012536600461031d565b6102c8565b6040516100b991906104bc565b61014a610145366004610416565b6102da565b6040516100b991906104a8565b6001600160a01b03909116600090815260026020526040902055565b6001600160a01b031660009081526002602052604081205490918290565b80516001600160a01b0383166000908152600160205260408120905b8281101561022357818482815181106101d657634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790558061021b816104db565b9150506101ad565b5050505050565b60006020819052908152604090208054600182015460039092015460ff91821692911683565b6001600160a01b03811660009081526001602090815260408083208054825181850281018501909352808352606094938301828280156102b957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161029b575b5093955050505050505b919050565b60026020526000908152604090205481565b600160205281600052604060002081815481106102f657600080fd5b6000918252602090912001546001600160a01b03169150829050565b80356102c381610518565b60006020828403121561032e578081fd5b813561033981610518565b9392505050565b60008060408385031215610352578081fd5b823561035d81610518565b915060208381013567ffffffffffffffff8082111561037a578384fd5b818601915086601f83011261038d578384fd5b81358181111561039f5761039f610502565b838102604051858282010181811085821117156103be576103be610502565b604052828152858101935084860182860187018b10156103dc578788fd5b8795505b83861015610405576103f181610312565b8552600195909501949386019386016103e0565b508096505050505050509250929050565b60008060408385031215610428578182fd5b823561043381610518565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b818110156104825783516001600160a01b03168352928401929184019160010161045d565b50909695505050505050565b921515835260208301919091521515604082015260600190565b6001600160a01b0391909116815260200190565b90815260200190565b9283526020830191909152604082015260600190565b60006000198214156104fb57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461052d57600080fd5b5056fea26469706673582212209cabd56453c7368dd65a8c8d857f0b33958ca765b7c09e5f4dc4aeb05e70969f64736f6c63430008000033";

export class ComptrollerMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _assets: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ComptrollerMock> {
    return super.deploy(_assets, overrides || {}) as Promise<ComptrollerMock>;
  }
  getDeployTransaction(
    _assets: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_assets, overrides || {});
  }
  attach(address: string): ComptrollerMock {
    return super.attach(address) as ComptrollerMock;
  }
  connect(signer: Signer): ComptrollerMock__factory {
    return super.connect(signer) as ComptrollerMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ComptrollerMockInterface {
    return new utils.Interface(_abi) as ComptrollerMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ComptrollerMock {
    return new Contract(address, _abi, signerOrProvider) as ComptrollerMock;
  }
}
