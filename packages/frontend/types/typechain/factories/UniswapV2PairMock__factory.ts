/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  UniswapV2PairMock,
  UniswapV2PairMockInterface,
} from "../UniswapV2PairMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610176806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063d004f0f714610030575b600080fd5b61004361003e3660046100ca565b610045565b005b60405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb906100739033908590600401610127565b602060405180830381600087803b15801561008d57600080fd5b505af11580156100a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100c59190610100565b505050565b600080604083850312156100dc578182fd5b82356001600160a01b03811681146100f2578283fd5b946020939093013593505050565b600060208284031215610111578081fd5b81518015158114610120578182fd5b9392505050565b6001600160a01b0392909216825260208201526040019056fea26469706673582212200a014ac940c1485712fbcef6fdddd388e103a4573fb2e835be6851fab6d50e1964736f6c63430008000033";

export class UniswapV2PairMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<UniswapV2PairMock> {
    return super.deploy(overrides || {}) as Promise<UniswapV2PairMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): UniswapV2PairMock {
    return super.attach(address) as UniswapV2PairMock;
  }
  connect(signer: Signer): UniswapV2PairMock__factory {
    return super.connect(signer) as UniswapV2PairMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UniswapV2PairMockInterface {
    return new utils.Interface(_abi) as UniswapV2PairMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniswapV2PairMock {
    return new Contract(address, _abi, signerOrProvider) as UniswapV2PairMock;
  }
}
