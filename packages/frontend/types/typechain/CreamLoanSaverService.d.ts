/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CreamLoanSaverServiceInterface extends ethers.utils.Interface {
  functions: {
    "CUSDC_ADDRESS()": FunctionFragment;
    "EXP_SCALE()": FunctionFragment;
    "GELATO()": FunctionFragment;
    "addTokenToWhiteList(address)": FunctionFragment;
    "cancelProtection(bytes32)": FunctionFragment;
    "comptroller()": FunctionFragment;
    "executeOperation(address,address,uint256,uint256,bytes)": FunctionFragment;
    "flashFeeBps()": FunctionFragment;
    "getUserAccountData(address)": FunctionFragment;
    "getUserProtectionAt(address,uint256)": FunctionFragment;
    "getUserProtectionData(bytes32)": FunctionFragment;
    "getUserReserveData(address,address)": FunctionFragment;
    "isUnderThresholdHealthFactor(address)": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "pokeMe()": FunctionFragment;
    "protectionFeeBps()": FunctionFragment;
    "removeTokenFromWhiteList(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "saveLoan(address,bytes32)": FunctionFragment;
    "setFlashFeeBps(uint256)": FunctionFragment;
    "setProtectionFeeBps(uint256)": FunctionFragment;
    "submitProtection(uint256,uint256,address,address,address,bytes,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapRouter()": FunctionFragment;
    "whiteListedTokens(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CUSDC_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "EXP_SCALE", values?: undefined): string;
  encodeFunctionData(functionFragment: "GELATO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addTokenToWhiteList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelProtection",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "comptroller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeOperation",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "flashFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAccountData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserProtectionAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserProtectionData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReserveData",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isUnderThresholdHealthFactor",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pokeMe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protectionFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeTokenFromWhiteList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saveLoan",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFlashFeeBps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtectionFeeBps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProtection",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      string,
      BytesLike,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whiteListedTokens",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "CUSDC_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "EXP_SCALE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GELATO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTokenToWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelProtection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "comptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAccountData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserProtectionAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserProtectionData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReserveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUnderThresholdHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pokeMe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protectionFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTokenFromWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "saveLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFlashFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtectionFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProtection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whiteListedTokens",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "ProtectionCanceled(address,bytes32)": EventFragment;
    "ProtectionSubmitted(address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtectionCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtectionSubmitted"): EventFragment;
}

export class CreamLoanSaverService extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CreamLoanSaverServiceInterface;

  functions: {
    CUSDC_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    EXP_SCALE(overrides?: CallOverrides): Promise<[BigNumber]>;

    GELATO(overrides?: CallOverrides): Promise<[string]>;

    addTokenToWhiteList(
      cToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelProtection(
      protectionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    comptroller(overrides?: CallOverrides): Promise<[string]>;

    executeOperation(
      sender: string,
      arg1: string,
      arg2: BigNumberish,
      premiums: BigNumberish,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flashFeeBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserAccountData(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalCollateralInEth: BigNumber;
        totalBorrowInEth: BigNumber;
        healthFactor: BigNumber;
        ethPerUsd: BigNumber;
      }
    >;

    getUserProtectionAt(
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { protectionId: string }>;

    getUserProtectionData(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, string, string] & {
          thresholdHealthFactor: BigNumber;
          wantedHealthFactor: BigNumber;
          colToken: string;
          debtToken: string;
        }
      ]
    >;

    getUserReserveData(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        balanceUnderlying: BigNumber;
        debtUnderlying: BigNumber;
        exchangeRateStored: BigNumber;
        borrowRatePerBlock: BigNumber;
        supplyRatePerBlock: BigNumber;
      }
    >;

    isUnderThresholdHealthFactor(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pokeMe(overrides?: CallOverrides): Promise<[string]>;

    protectionFeeBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeTokenFromWhiteList(
      cToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    saveLoan(
      account: string,
      protectionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFlashFeeBps(
      _flashFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtectionFeeBps(
      _protectionFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitProtection(
      thresholdHealthFactor: BigNumberish,
      wantedHealthFactor: BigNumberish,
      colToken: string,
      debtToken: string,
      _resolverAddress: string,
      _resolverData: BytesLike,
      _useTaskTreasuryFunds: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapRouter(overrides?: CallOverrides): Promise<[string]>;

    whiteListedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  CUSDC_ADDRESS(overrides?: CallOverrides): Promise<string>;

  EXP_SCALE(overrides?: CallOverrides): Promise<BigNumber>;

  GELATO(overrides?: CallOverrides): Promise<string>;

  addTokenToWhiteList(
    cToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelProtection(
    protectionId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  comptroller(overrides?: CallOverrides): Promise<string>;

  executeOperation(
    sender: string,
    arg1: string,
    arg2: BigNumberish,
    premiums: BigNumberish,
    params: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flashFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

  getUserAccountData(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalCollateralInEth: BigNumber;
      totalBorrowInEth: BigNumber;
      healthFactor: BigNumber;
      ethPerUsd: BigNumber;
    }
  >;

  getUserProtectionAt(
    account: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getUserProtectionData(
    id: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string] & {
      thresholdHealthFactor: BigNumber;
      wantedHealthFactor: BigNumber;
      colToken: string;
      debtToken: string;
    }
  >;

  getUserReserveData(
    asset: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      balanceUnderlying: BigNumber;
      debtUnderlying: BigNumber;
      exchangeRateStored: BigNumber;
      borrowRatePerBlock: BigNumber;
      supplyRatePerBlock: BigNumber;
    }
  >;

  isUnderThresholdHealthFactor(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  oracle(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pokeMe(overrides?: CallOverrides): Promise<string>;

  protectionFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

  removeTokenFromWhiteList(
    cToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  saveLoan(
    account: string,
    protectionId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFlashFeeBps(
    _flashFeeBps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtectionFeeBps(
    _protectionFeeBps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitProtection(
    thresholdHealthFactor: BigNumberish,
    wantedHealthFactor: BigNumberish,
    colToken: string,
    debtToken: string,
    _resolverAddress: string,
    _resolverData: BytesLike,
    _useTaskTreasuryFunds: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapRouter(overrides?: CallOverrides): Promise<string>;

  whiteListedTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    CUSDC_ADDRESS(overrides?: CallOverrides): Promise<string>;

    EXP_SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    GELATO(overrides?: CallOverrides): Promise<string>;

    addTokenToWhiteList(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelProtection(
      protectionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    comptroller(overrides?: CallOverrides): Promise<string>;

    executeOperation(
      sender: string,
      arg1: string,
      arg2: BigNumberish,
      premiums: BigNumberish,
      params: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    flashFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

    getUserAccountData(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalCollateralInEth: BigNumber;
        totalBorrowInEth: BigNumber;
        healthFactor: BigNumber;
        ethPerUsd: BigNumber;
      }
    >;

    getUserProtectionAt(
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getUserProtectionData(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string] & {
        thresholdHealthFactor: BigNumber;
        wantedHealthFactor: BigNumber;
        colToken: string;
        debtToken: string;
      }
    >;

    getUserReserveData(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        balanceUnderlying: BigNumber;
        debtUnderlying: BigNumber;
        exchangeRateStored: BigNumber;
        borrowRatePerBlock: BigNumber;
        supplyRatePerBlock: BigNumber;
      }
    >;

    isUnderThresholdHealthFactor(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    oracle(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pokeMe(overrides?: CallOverrides): Promise<string>;

    protectionFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

    removeTokenFromWhiteList(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    saveLoan(
      account: string,
      protectionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setFlashFeeBps(
      _flashFeeBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtectionFeeBps(
      _protectionFeeBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    submitProtection(
      thresholdHealthFactor: BigNumberish,
      wantedHealthFactor: BigNumberish,
      colToken: string,
      debtToken: string,
      _resolverAddress: string,
      _resolverData: BytesLike,
      _useTaskTreasuryFunds: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapRouter(overrides?: CallOverrides): Promise<string>;

    whiteListedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    ProtectionCanceled(
      account?: string | null,
      protectionId?: BytesLike | null
    ): TypedEventFilter<
      [string, string],
      { account: string; protectionId: string }
    >;

    ProtectionSubmitted(
      account?: string | null,
      protectionId?: BytesLike | null
    ): TypedEventFilter<
      [string, string],
      { account: string; protectionId: string }
    >;
  };

  estimateGas: {
    CUSDC_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    EXP_SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    GELATO(overrides?: CallOverrides): Promise<BigNumber>;

    addTokenToWhiteList(
      cToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelProtection(
      protectionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    comptroller(overrides?: CallOverrides): Promise<BigNumber>;

    executeOperation(
      sender: string,
      arg1: string,
      arg2: BigNumberish,
      premiums: BigNumberish,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flashFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

    getUserAccountData(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserProtectionAt(
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserProtectionData(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserReserveData(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUnderThresholdHealthFactor(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pokeMe(overrides?: CallOverrides): Promise<BigNumber>;

    protectionFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

    removeTokenFromWhiteList(
      cToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    saveLoan(
      account: string,
      protectionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFlashFeeBps(
      _flashFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtectionFeeBps(
      _protectionFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitProtection(
      thresholdHealthFactor: BigNumberish,
      wantedHealthFactor: BigNumberish,
      colToken: string,
      debtToken: string,
      _resolverAddress: string,
      _resolverData: BytesLike,
      _useTaskTreasuryFunds: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    whiteListedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CUSDC_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EXP_SCALE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GELATO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addTokenToWhiteList(
      cToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelProtection(
      protectionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    comptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeOperation(
      sender: string,
      arg1: string,
      arg2: BigNumberish,
      premiums: BigNumberish,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flashFeeBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserAccountData(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserProtectionAt(
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserProtectionData(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserReserveData(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUnderThresholdHealthFactor(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pokeMe(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protectionFeeBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeTokenFromWhiteList(
      cToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    saveLoan(
      account: string,
      protectionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFlashFeeBps(
      _flashFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtectionFeeBps(
      _protectionFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitProtection(
      thresholdHealthFactor: BigNumberish,
      wantedHealthFactor: BigNumberish,
      colToken: string,
      debtToken: string,
      _resolverAddress: string,
      _resolverData: BytesLike,
      _useTaskTreasuryFunds: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whiteListedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
