/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CreamAccountDataProviderTestInterface extends ethers.utils.Interface {
  functions: {
    "CUSDC_ADDRESS()": FunctionFragment;
    "EXP_SCALE()": FunctionFragment;
    "calculateHealthFactor(uint256,uint256)": FunctionFragment;
    "comptroller()": FunctionFragment;
    "getUnderlyingPrice(address)": FunctionFragment;
    "getUsdcEthPrice()": FunctionFragment;
    "getUserAccountData(address)": FunctionFragment;
    "getUserReserveData(address,address)": FunctionFragment;
    "isUnderThresholdHealthFactor(address)": FunctionFragment;
    "oracle()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CUSDC_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "EXP_SCALE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateHealthFactor",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "comptroller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUsdcEthPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAccountData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReserveData",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isUnderThresholdHealthFactor",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "CUSDC_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "EXP_SCALE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "comptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsdcEthPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAccountData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReserveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUnderThresholdHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;

  events: {};
}

export class CreamAccountDataProviderTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CreamAccountDataProviderTestInterface;

  functions: {
    CUSDC_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    EXP_SCALE(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateHealthFactor(
      totalCollateral: BigNumberish,
      totalBorrow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    comptroller(overrides?: CallOverrides): Promise<[string]>;

    getUnderlyingPrice(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    getUsdcEthPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    getUserAccountData(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalCollateralInEth: BigNumber;
        totalBorrowInEth: BigNumber;
        healthFactor: BigNumber;
        ethPerUsd: BigNumber;
      }
    >;

    getUserReserveData(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        balanceUnderlying: BigNumber;
        debtUnderlying: BigNumber;
        exchangeRateStored: BigNumber;
        borrowRatePerBlock: BigNumber;
        supplyRatePerBlock: BigNumber;
      }
    >;

    isUnderThresholdHealthFactor(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;
  };

  CUSDC_ADDRESS(overrides?: CallOverrides): Promise<string>;

  EXP_SCALE(overrides?: CallOverrides): Promise<BigNumber>;

  calculateHealthFactor(
    totalCollateral: BigNumberish,
    totalBorrow: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  comptroller(overrides?: CallOverrides): Promise<string>;

  getUnderlyingPrice(
    cToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUsdcEthPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getUserAccountData(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalCollateralInEth: BigNumber;
      totalBorrowInEth: BigNumber;
      healthFactor: BigNumber;
      ethPerUsd: BigNumber;
    }
  >;

  getUserReserveData(
    asset: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      balanceUnderlying: BigNumber;
      debtUnderlying: BigNumber;
      exchangeRateStored: BigNumber;
      borrowRatePerBlock: BigNumber;
      supplyRatePerBlock: BigNumber;
    }
  >;

  isUnderThresholdHealthFactor(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  oracle(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    CUSDC_ADDRESS(overrides?: CallOverrides): Promise<string>;

    EXP_SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    calculateHealthFactor(
      totalCollateral: BigNumberish,
      totalBorrow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    comptroller(overrides?: CallOverrides): Promise<string>;

    getUnderlyingPrice(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUsdcEthPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getUserAccountData(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalCollateralInEth: BigNumber;
        totalBorrowInEth: BigNumber;
        healthFactor: BigNumber;
        ethPerUsd: BigNumber;
      }
    >;

    getUserReserveData(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        balanceUnderlying: BigNumber;
        debtUnderlying: BigNumber;
        exchangeRateStored: BigNumber;
        borrowRatePerBlock: BigNumber;
        supplyRatePerBlock: BigNumber;
      }
    >;

    isUnderThresholdHealthFactor(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    oracle(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    CUSDC_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    EXP_SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    calculateHealthFactor(
      totalCollateral: BigNumberish,
      totalBorrow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    comptroller(overrides?: CallOverrides): Promise<BigNumber>;

    getUnderlyingPrice(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUsdcEthPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getUserAccountData(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserReserveData(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUnderThresholdHealthFactor(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CUSDC_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EXP_SCALE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateHealthFactor(
      totalCollateral: BigNumberish,
      totalBorrow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    comptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUnderlyingPrice(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUsdcEthPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserAccountData(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserReserveData(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUnderThresholdHealthFactor(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
